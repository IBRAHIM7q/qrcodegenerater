!function(e,r){for(var t in r)e[t]=r[t]}(exports,function(e){var r={};function t(o){if(r[o])return r[o].exports;var n=r[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,t),n.l=!0,n.exports}return t.m=e,t.c=r,t.d=function(e,r,o){t.o(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,r){if(1&r&&(e=t(e)),8&r)return e;if(4&r&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&r&&"string"!=typeof e)for(var n in e)t.d(o,n,function(r){return e[r]}.bind(null,n));return o},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,r){return Object.prototype.hasOwnProperty.call(e,r)},t.p="",t(t.s=2)}([function(e,r){e.exports=require("@prisma/client")},,function(e,r,t){const{PrismaClient:o}=t(0),{formidable:n}=t(3),{v4:i}=t(4),a=t(5),s=new o;r.handler=async(e,r)=>{if("POST"!==e.httpMethod)return{statusCode:405,body:JSON.stringify({error:"Method not allowed"})};try{let r,t;try{const o=await function(e){return new Promise((r,t)=>{try{const o={headers:e.headers,body:Buffer.from(e.body,e.isBase64Encoded?"base64":"utf8")};n({keepExtensions:!0,multiples:!0,allowEmptyFiles:!1,maxFileSize:10485760}).parse(o,(e,o,n)=>{if(e)return t(e);r({fields:o,files:n})})}catch(e){console.error("Error in parseFormData:",e),t(e)}})}(e);r=o.fields,t=o.files}catch(e){return console.error("Error parsing form data:",e),{statusCode:400,body:JSON.stringify({error:"Failed to parse form data"})}}if(!t||!t.pdf)return{statusCode:400,body:JSON.stringify({error:"No PDF file uploaded"})};const o=Array.isArray(t.pdf)?t.pdf[0]:t.pdf,f=i(),l=`${process.env.URL||"https://your-site.netlify.app"}/pdf/${f}`;let u;try{if(o.buffer)u=o.buffer;else{if(!o.filepath)throw new Error("No file content available");u=await new Promise((e,r)=>{a.readFile(o.filepath,(t,o)=>{t?r(t):e(o)})})}}catch(e){return console.error("Error reading file:",e),{statusCode:500,body:JSON.stringify({error:"Failed to read uploaded file"})}}const d=o.size||(u?u.length:0);let c;try{c=await s.pDF.create({data:{id:f,filename:o.originalFilename||o.originalname||"uploaded.pdf",content:u,fileSize:d,mimeType:o.mimetype||"application/pdf",url:l}})}catch(e){return console.error("Database error:",e),{statusCode:500,body:JSON.stringify({error:"Failed to save PDF to database"})}}return{statusCode:200,body:JSON.stringify({id:c.id,url:c.url})}}catch(e){return console.error("Error storing PDF:",e),{statusCode:500,body:JSON.stringify({error:"Failed to store PDF",message:e.message||"Unknown error"})}}}},function(e,r){e.exports=require("formidable")},function(e,r){e.exports=require("uuid")},function(e,r){e.exports=require("fs")}]));